From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Danny Baumann <dannybaumann@web.de>
Date: Thu, 18 May 2017 11:04:40 +0200
Subject: [PATCH] Add support for getting updates for theme color changes.

---
 .../webview/chromium/WebViewChromium.java     |  9 +++++
 .../WebViewContentsClientAdapter.java         | 34 +++++++++++++++++++
 .../android_webview/AwContentsClient.java     |  2 ++
 .../AwContentsClientCallbackHelper.java       | 11 ++++++
 .../AwWebContentsObserver.java                | 15 ++++++++
 .../test/NullContentsClient.java              |  4 +++
 6 files changed, 75 insertions(+)

diff --git a/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromium.java b/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromium.java
index e7882d03a01d1..6dca837aac95d 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromium.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromium.java
@@ -10,6 +10,7 @@ import android.content.Intent;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.Paint;
 import android.graphics.Picture;
 import android.graphics.Rect;
@@ -73,6 +74,7 @@ import org.chromium.components.embedder_support.application.ClassLoaderContextWr
 import org.chromium.content_public.browser.MessagePayload;
 import org.chromium.content_public.browser.NavigationHistory;
 import org.chromium.content_public.browser.SmartClipProvider;
+import org.chromium.content_public.browser.WebContents;
 import org.chromium.url.GURL;
 
 import java.io.BufferedWriter;
@@ -1171,6 +1173,13 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
         return mAwContents.getMostRecentProgress();
     }
 
+    public int getThemeColor() {
+        WebContents webContents = mAwContents != null ? mAwContents.getWebContents() : null;
+        if (webContents == null) return Color.TRANSPARENT;
+        // No checkThread() because the value is cached java side (workaround for b/10533304).
+        return webContents.getThemeColor();
+    }
+
     @Override
     public int getContentHeight() {
         recordWebViewApiCall(ApiCall.GET_CONTENT_HEIGHT);
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java b/android_webview/glue/java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java
index 72592908ea177..21fb608018aa9 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java
@@ -56,6 +56,8 @@ import org.chromium.components.embedder_support.util.WebResourceResponseInfo;
 import org.chromium.content_public.browser.UiThreadTaskTraits;
 
 import java.lang.ref.WeakReference;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.security.Principal;
 import java.security.PrivateKey;
 import java.security.cert.X509Certificate;
@@ -98,6 +100,9 @@ class WebViewContentsClientAdapter extends SharedWebViewContentsClientAdapter {
     private WeakHashMap<AwPermissionRequest, WeakReference<PermissionRequestAdapter>>
             mOngoingPermissionRequests;
 
+    private static Method sWebChromeClientThemeColorMethod;
+    private static boolean sWebChromeClientThemeColorMethodInitialized;
+
     /**
      * Adapter constructor.
      *
@@ -109,6 +114,17 @@ class WebViewContentsClientAdapter extends SharedWebViewContentsClientAdapter {
         super(webView, webViewDelegate, context);
         try (ScopedSysTraceEvent event =
                         ScopedSysTraceEvent.scoped("WebViewContentsClientAdapter.constructor")) {
+
+            if (!sWebChromeClientThemeColorMethodInitialized) {
+                try {
+                    sWebChromeClientThemeColorMethod = WebChromeClient.class.getMethod(
+                            "onThemeColorChanged", WebView.class, Integer.TYPE);
+                } catch (Exception e) {
+                    // ignored
+                }
+                sWebChromeClientThemeColorMethodInitialized = true;
+            }
+
             // See //android_webview/docs/how-does-on-create-window-work.md for more details.
             mUiThreadHandler = new Handler() {
                 @Override
@@ -1037,6 +1053,24 @@ class WebViewContentsClientAdapter extends SharedWebViewContentsClientAdapter {
         }
     }
 
+    /**
+     * @see AwContentsClient#onThemeColorChanged(int)
+     */
+    @Override
+    public void onThemeColorChanged(int color) {
+        try {
+            TraceEvent.begin("WebViewContentsClientAdapter.onThemeColorChanged");
+            if (mWebChromeClient != null && sWebChromeClientThemeColorMethod != null) {
+                if (TRACE) Log.d(TAG, "onThemeColorChanged=" + color);
+                sWebChromeClientThemeColorMethod.invoke(mWebChromeClient, mWebView, color);
+            }
+        } catch (IllegalAccessException | InvocationTargetException e) {
+            // ignored
+        } finally {
+            TraceEvent.end("WebViewContentsClientAdapter.onThemeColorChanged");
+        }
+    }
+
     private static class AwHttpAuthHandlerAdapter extends android.webkit.HttpAuthHandler {
         private AwHttpAuthHandler mAwHandler;
 
diff --git a/android_webview/java/src/org/chromium/android_webview/AwContentsClient.java b/android_webview/java/src/org/chromium/android_webview/AwContentsClient.java
index c8e9ed487f368..90a12fe250206 100644
--- a/android_webview/java/src/org/chromium/android_webview/AwContentsClient.java
+++ b/android_webview/java/src/org/chromium/android_webview/AwContentsClient.java
@@ -170,6 +170,8 @@ public abstract class AwContentsClient {
 
     public abstract void onProgressChanged(int progress);
 
+    public abstract void onThemeColorChanged(int color);
+
     public abstract WebResourceResponseInfo shouldInterceptRequest(AwWebResourceRequest request);
 
     public abstract boolean shouldOverrideKeyEvent(KeyEvent event);
diff --git a/android_webview/java/src/org/chromium/android_webview/AwContentsClientCallbackHelper.java b/android_webview/java/src/org/chromium/android_webview/AwContentsClientCallbackHelper.java
index 263050de539f6..6a19aa8c026f9 100644
--- a/android_webview/java/src/org/chromium/android_webview/AwContentsClientCallbackHelper.java
+++ b/android_webview/java/src/org/chromium/android_webview/AwContentsClientCallbackHelper.java
@@ -134,6 +134,9 @@ public class AwContentsClientCallbackHelper {
     private static final int MSG_ON_FORM_RESUBMISSION = 14;
     private static final int MSG_ON_SAFE_BROWSING_HIT = 15;
 
+    // Custom
+    private static final int MSG_ON_THEME_COLOR_CHANGED = 99;
+
     // Minimum period allowed between consecutive onNewPicture calls, to rate-limit the callbacks.
     private static final long ON_NEW_PICTURE_MIN_PERIOD_MILLIS = 500;
     // Timestamp of the most recent onNewPicture callback.
@@ -229,6 +232,10 @@ public class AwContentsClientCallbackHelper {
                     mContentsClient.onProgressChanged(msg.arg1);
                     break;
                 }
+                case MSG_ON_THEME_COLOR_CHANGED: {
+                    mContentsClient.onThemeColorChanged(msg.arg1);
+                    break;
+                }
                 case MSG_SYNTHESIZE_PAGE_LOADING: {
                     final String url = (String) msg.obj;
                     mContentsClient.onPageStarted(url);
@@ -341,6 +348,10 @@ public class AwContentsClientCallbackHelper {
         mHandler.sendMessage(mHandler.obtainMessage(MSG_SYNTHESIZE_PAGE_LOADING, url));
     }
 
+    public void postOnThemeColorChanged(int color) {
+        mHandler.sendMessage(mHandler.obtainMessage(MSG_ON_THEME_COLOR_CHANGED, color, 0));
+    }
+
     public void postDoUpdateVisitedHistory(String url, boolean isReload) {
         DoUpdateVisitedHistoryInfo info = new DoUpdateVisitedHistoryInfo(url, isReload);
         mHandler.sendMessage(mHandler.obtainMessage(MSG_DO_UPDATE_VISITED_HISTORY, info));
diff --git a/android_webview/java/src/org/chromium/android_webview/AwWebContentsObserver.java b/android_webview/java/src/org/chromium/android_webview/AwWebContentsObserver.java
index 6bec03bd5d587..337beb565c3a8 100644
--- a/android_webview/java/src/org/chromium/android_webview/AwWebContentsObserver.java
+++ b/android_webview/java/src/org/chromium/android_webview/AwWebContentsObserver.java
@@ -167,12 +167,27 @@ public class AwWebContentsObserver extends WebContentsObserver {
             });
         }
 
+        if (client != null) {
+            AwContents awContents = mAwContents.get();
+            WebContents contents = awContents != null ? awContents.getWebContents() : null;
+            if (contents != null) {
+                client.getCallbackHelper().postOnThemeColorChanged(contents.getThemeColor());
+            }
+        }
+
         if (client != null && navigation.isPrimaryMainFrameFragmentNavigation()) {
             // Note fragment navigations do not have a matching onPageStarted.
             client.getCallbackHelper().postOnPageFinished(url);
         }
     }
 
+    public void didChangeThemeColor(int color) {
+        AwContentsClient client = mAwContentsClient.get();
+        if (client != null) {
+            client.getCallbackHelper().postOnThemeColorChanged(color);
+        }
+    }
+
     public boolean didEverCommitNavigation() {
         return mCommittedNavigation;
     }
diff --git a/android_webview/test/shell/src/org/chromium/android_webview/test/NullContentsClient.java b/android_webview/test/shell/src/org/chromium/android_webview/test/NullContentsClient.java
index fd3eb8a447c1c..804d326648da4 100644
--- a/android_webview/test/shell/src/org/chromium/android_webview/test/NullContentsClient.java
+++ b/android_webview/test/shell/src/org/chromium/android_webview/test/NullContentsClient.java
@@ -72,6 +72,10 @@ public class NullContentsClient extends AwContentsClient {
     public void onProgressChanged(int progress) {
     }
 
+    @Override
+    public void onThemeColorChanged(int color) {
+    }
+
     @Override
     public WebResourceResponseInfo shouldInterceptRequest(
             AwContentsClient.AwWebResourceRequest request) {
